#!/bin/bash
# cross-pi-boost.sh
# Cross-compile boost libraries for Raspberry PI, using toolchain generated by cross-pi-buildroot.sh

if [[ $EUID -eq 0 ]]; then
  echo "This script must NOT be run as root" 1>&2
  exit 1
fi

# make sure the installation root folder exists
mkdir -p $HOME/cross-pi-build

BOOST_VERSION="72"
BOOST_NAME="boost_1_${BOOST_VERSION}_0"
TARGET_DIR=$HOME/cross-pi-build/libraries/${BOOST_NAME}

# download the boost code, store in temporary directory
rm -Rf /tmp/build_boost
mkdir /tmp/build_boost
wget https://dl.bintray.com/boostorg/release/1.${BOOST_VERSION}.0/source/${BOOST_NAME}.tar.bz2 -P /tmp/build_boost
# 
# cp -v /NAS_openbzr/redist/boost_1_72_0.tar.bz2  /tmp/build_boost/
#
# move to download directory and extract the package
pushd /tmp/build_boost > /dev/null 
tar -xvf ${BOOST_NAME}.tar.bz2

# Move to main boost folder to perform the bootstrap and generate ./b2
pushd ${BOOST_NAME} > /dev/null 

# bootstrap.sh invokes the Kubuntu C++ compiler to generate ./b2
# ./b2 runs under Kubuntu, NOT the target Raspberry PI
./bootstrap.sh --prefix=${TARGET_DIR}
if [ $? != 0 ]; then exit -1 ; fi

rm -Rf $HOME/cross-pi-build/libraries/${BOOST_NAME}

# Create a boost user configuration file specifying the cross compiler
# This is how we tell boost ./b2 to cross compile
echo " using gcc : : $HOME/cross-pi-build/buildroot/output/host/bin/arm-linux-g++ : --sysroot=$HOME/cross-pi-build/buildroot/output/host/arm-buildroot-linux-gnueabihf/sysroot/ ; " > ../user-config.jam

# now run ./b2 which will invoke the cross compiler specified in user-config.jam 
# ./b2 will also install to the folder specified in --prefix above
DISABLE="--without-mpi --without-graph_parallel"
./b2 --user-config=../user-config.jam   toolset=gcc architecture=arm  link=static ${DISABLE} install 

# back up directory tree
popd > /dev/null
popd > /dev/null

if [ -d "$TARGET_DIR" ]; then
  echo "Boost libraries were installed to ${TARGET_DIR}"
else
  echo "Error: ${TARGET_DIR} not found. Build failed"
  exit 1
fi
